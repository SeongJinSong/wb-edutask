plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'application'
    id 'eclipse'
    id 'idea'
}

group = 'com.wb'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// 의존성 버전 관리 (BOM 방식)
// Spring Boot BOM이 버전 관리를 수행하므로 별도의 Netty BOM은 사용하지 않습니다

dependencies {
    // Spring Boot Web Starter
    implementation 'org.springframework.boot:spring-boot-starter-web'
    
    // Spring Boot Data JPA Starter
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    
    // Spring Boot Validation Starter
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    
    // Spring Boot Security Starter (H2 콘솔 접근용)
    implementation 'org.springframework.boot:spring-boot-starter-security'
    
    // Spring Boot Actuator (모니터링 및 관리 엔드포인트)
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    
    // Spring Data Redis + Jedis 클라이언트 (Netty 의존성 회피)
    implementation('org.springframework.boot:spring-boot-starter-data-redis') {
        exclude group: 'io.lettuce', module: 'lettuce-core'
    }
    implementation 'redis.clients:jedis:5.1.5'
    
    // H2 Database (컴파일 타임에도 필요 - TCP 서버 설정용)
    implementation 'com.h2database:h2'
    
    // JAXB Runtime (Java 11+에서 필요)
    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:4.0.5'
    runtimeOnly 'org.glassfish.jaxb:jaxb-core:4.0.5'
    runtimeOnly 'org.glassfish.jaxb:txw2:4.0.5'
    
    // Spring Boot DevTools (개발용)
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    
    // Spring Boot Test Starter
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    
    // Spring Boot Testcontainers (테스트용)
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    
    // Testcontainers JUnit Jupiter
    testImplementation 'org.testcontainers:junit-jupiter'
    
    // 테스트용 Redis 의존성 추가
    testImplementation('org.springframework.boot:spring-boot-starter-data-redis') {
        exclude group: 'io.lettuce', module: 'lettuce-core'
    }
    testImplementation 'redis.clients:jedis:5.1.5'
    
    // Lombok (선택사항 - 코드 간소화)
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
    useJUnitPlatform()
    
    // 테스트 실행시 동기 모드 강제 설정
    // systemProperty 'wb.enrollment.sync', 'true'
    
    // 테스트 격리를 위한 설정
    forkEvery = 1
    maxParallelForks = 1
    
    // 테스트 타임아웃 설정 (60초)
    timeout = java.time.Duration.ofSeconds(60)
}

// Gradle Wrapper 설정
wrapper {
    gradleVersion = '8.10.2'
    distributionType = Wrapper.DistributionType.ALL
}

// Java 컴파일 설정
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-parameters']
}

// JAR 파일 설정
jar {
    enabled = false
    archiveClassifier = ''
}

// Spring Boot JAR 설정
bootJar {
    archiveBaseName = 'wb-edutask'
    archiveVersion = '1.0.0'
    archiveClassifier = ''
}

// 애플리케이션 실행 설정
application {
    mainClass = 'com.wb.edutask.WbEdutaskApplication'
}

// 개발 서버 설정
bootRun {
    jvmArgs = [
        '-Xmx1024m',
        '-Xms512m',
        '-Dspring.profiles.active=dev'
    ]
}

// 테스트 설정
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

// Eclipse IDE 설정
eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
    jdt {
        sourceCompatibility = 21
        targetCompatibility = 21
    }
}

// IntelliJ IDEA 설정
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
